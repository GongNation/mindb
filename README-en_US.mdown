## Installation

You just need to include the `nanodb.js`(or `nanodb.min.js`) in the HTML file to use NanoDB.

```html
<script src="/path/to/script/nanodb.js" type="text/javascript"></script>
<script type="text/javascript">
  // Build an AWESOME App with NanoDB!
  nano.set('foo', 'bar')
    .then(function() {
      return nano.get('foo');
    })
    .then(function(value) {
      console.log(value); //=> bar
    });
</script>
```

If you are using a CommonJS freamwork(RequireJS, SeaJS, etc.) to build your app, you do not have to edit anything, just require it.

```js
// RequireJS
require(['/path/to/script/nanodb'], function(nano) {
  nano.set('me', 'Will Wen Gunn');
});

// SeaJS
seajs.use('/path/to/script/nanodb', function(nano) {
  nano.get('me', function(name) {
    console.log(name); //=> Will Wen Gunn
  });
});
```

Actually, NanoDB also can run in Node.js with File System.

```js
var nano = require('nano');
var fs   = require('fs');

function FileStore(filename) {
  this.filename = filename;
  this.buffer   = null;
  this.async    = true;
}
FileStore.prototype.set = function(key, value[, callback]) {
  var self = this;

  if (!self.buffer) {
    fs.readFile(self.filename, function(err, data) {
      if (err)
        return callback(err);

      self.buffer = JSON.parse(data.toString());
      self.buffer[key] = value;
      fs.writeFile(self.filename, JSON.stringify(self.buffer), function(err) {
        if (err)
          return callback(err);

        callback();
      });
    });
  } else {
    self.buffer[key] = value;

    fs.writeFile(self.filename, JSON.stringify(self.buffer), function(err) {
      if (err)
        return callback(err);

      callback();
    });
  }
};
FileStore.prototype.get = function(key[, callback]) {
  var self = this;

  if (!self.buffer) {
    fs.readFile(self.filename, function(err, data) {
      if (err)
        return callback(err);

      self.buffer = JSON.parse(data);

      callback(null, self.buffer[key]);
    });
  } else {
    if (self.buffer[key]) {
      return callback(null, self.buffer[key]);
    } else {
      return callback(new Error('This key is not exists.'));
    }
  }
};
FileStore.prototype.remove = function(key[, callback]) {
  var self = this;

  if (!self.buffer) {
    fs.readFile(self.filename, function(err, data) {
      if (err)
        return callback(err);

      delete self.buffer[key];

      fs.writeFile(self.filename, JSON.stringify(self.buffer)[, callback]);
    });
  } else {
    delete self.buffer[key];

    fs.writeFile(self.filename, JSON.stringify(self.buffer)[, callback]);
  }
};

nano.store = new FileStore(__dirname + '/mydb.data');

nano.set('foo', 'bar', function(err) {
  if (err) {
    return console.error(err);
  }

  // Do somethings.
});
```

Are you building a mobile app or Hybird app using HTML5 and some framework like Adobe Air?  
Conguturations! NanoDB is fit for them too.

```js
// For Adobe AIR EncryptedLocalStore
function EncryptedLocalStore() {}
EncryptedLocalStore.prototype.get = function(key) {
  return air.EncryptedLocalStore.getItem(key);
};
EncryptedLocalStore.prototype.set = function(key, value) {
  return air.EncryptedLocalStore.setItem(key, value);
};
EncryptedLocalStore.prototype.remove = function(key) {
  return air.EncryptedLocalStore.removeItem(key);
};

nano.store = new EncryptedLocalStore();
```